# delimit;set more off;set mem 250m;use macoursetal_main;set seed 1;gen ln_pce05 =ln(cons_tot_pc_05);gen ln_pce06 =ln(cons_tot_pc_06);
gen ln_pce08 =ln(cons_tot_pc_08);save fandata, replace;/* 2006*/
egen pce_C025=pctile(ln_pce06) if T==0, p(2.5);
egen pce_C975=pctile(ln_pce06) if T==0, p(97.5);
gen xC=1 if ln_pce06>pce_C025 & ln_pce06<pce_C975;

** generate identifiers for 1st and 99th percentile to define grids in fan**;       egen pce_01=pctile(ln_pce06) if T==0, p(1);egen pce_99=pctile(ln_pce06) if T==0, p(99);  egen pce_10=pctile(ln_pce06) if T==0, p(10);egen pce_90=pctile(ln_pce06) if T==0, p(90);   
mac def depvars_st1 " z_language_06  z_social_06  z_tvip_06  z_behavior_06  z_memory_06 z_finmotor_06  z_grmotor_06  z_legmotor_06 z_height_06  z_weight_06";
keep z_language_06  z_social_06  z_tvip_06  z_behavior_06  z_memory_06 z_finmotor_06  z_grmotor_06  z_legmotor_06 z_height_06  z_weight_06 ln_pce06 unique_05 T xC pce_C025 pce_C975 pce_01 pce_99 pce_10 pce_90;foreach var of varlist z_language_06  z_social_06  z_tvip_06  z_behavior_06  z_memory_06 z_finmotor_06  z_grmotor_06  z_legmotor_06 z_height_06  z_weight_06 {;egen `var'o =  pctile(`var'), p(99.5);egen `var'l = pctile(`var'), p(0.5);replace `var' = . if `var' > `var'o;replace `var' = . if `var' < `var'l;drop `var'o `var'l;};
***********FAN REGRESSIONS ECD OUTCOMES ON LOG PCE FOR CONTROL - GRADIENTS FIG ************;***********FAN REGRESSIONS ECD OUTCOMES ON LOG PCE FOR CONTROL - GRADIENTS FIG ************;***********FAN REGRESSIONS ECD OUTCOMES ON LOG PCE FOR CONTROL - GRADIENTS FIG ************;/* Range of dependent variable */;/* cut-of 1% highest and 1% lowest values of lncpe06 for the control for fan of gradients*/;global xmin =   7.11995;global xmax =    9.923944  ;/* Number of points at which to calculate, 50 to 100 are typically fine */;global gsize = 100;/* Size of each step */;global st = ($xmax - $xmin)/($gsize-1);/* Bandwidth */;global h = 0.99;/*Fan Locally-weighted nonparametric regression, quartic kernelRefer to URL: www.worldbank.org/LSMS/tools/deaton, or the Deaton bookfan_reg performs the locally-weighted nonparametric regression:argument 1 is the dependent variable   (input)argument 2 is the explanatory variable (input)argument 3 is the estimated regression function (output)argument 4 is the derivative of the regression function (output)argument 5 is the bandwidth (input)argument 6 is the grid over the explanatory variable for evaluation*/;cap program drop fan_reg;program def fan_reg;	/* ic is the loop counter */;	local ic = 1;	/* Generate the estimated function (3) and its derivative (4) */;	gen `3' = .;		gen `4' = .;	/* Loop until reaching the last cell of the grid */;	while `ic' <= $gsize {;	/* Display the counter */;	display `ic';		quietly {;	/* Get the ic entry in the grid */;	local xx = `6'[`ic'];	/* Absolute value of x - x(i), divided by the bandwidth */;	gen z = abs((`2' - `xx')/`5');	/* Observation i gets the following quartic kernel weight */;	gen kz = (15/16)*(1 - z^2)^2 if z<=1;	/* Perform the regression weighted by the kernel (analogous to GLS) */;	reg  `1' `2' [aw=kz] if kz~=., robust;	/* The estimated regression is the value at x */;	replace `3' = _b[_cons]+_b[`2']*`xx' in `ic';	/* The estimated slope is the coefficient estimate at x */;	replace `4' = _b[`2'] in `ic';	drop z kz;	};	local ic = `ic' + 1;	};end;
drop if ln_pce06<$xmin;drop if ln_pce06>$xmax;save datafan_np, replace;/* COMPARISON language */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_language ln_pce06 ESTFCTC ESTDERC $h xgrid;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)) ,	ytitle(Language)	xtitle("log pce, 2006")   xline (7.613428) xline(9.01545)	legend(off) ;	graph save language_gradient, replace;	clear;/* COMPARISON social-personal */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_social ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle(Social-personal)	xtitle("log pce, 2006")  xline (7.613428) xline(9.01545)	legend(off) ;	graph save personal_gradient, replace;	clear;/* COMPARISON fine motor */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_finmotor ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("Fine Motor")	xtitle("log pce, 2006")   xline (7.613428) xline(9.01545)	legend(off) ;	graph save finmotor_gradient, replace;	clear;/* COMPARISON gross motor */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_grmotor ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("Gross Motor")	xtitle("log pce, 2006")      xline (7.613428) xline(9.01545)	legend(off) ;	graph save grmotor_gradient, replace;	clear;/* COMPARISON TVIP */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_tvip ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("TVIP")	xtitle("log pce, 2006")  xline (7.613428) xline(9.01545)	legend(off) ;	graph save tvip_gradient, replace;clear;	/* COMPARISON Memory */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_memory ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("Short Memory")	xtitle("log pce, 2006")  xline (7.613428) xline(9.01545)	legend(off) ;	graph save memory_gradient, replace;clear;		/* COMPARISON Leg Motor */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_legmotor ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("Leg motor")	xtitle("log pce, 2006")   xline (7.613428) xline(9.01545)	legend(off) ;	graph save legmotor_gradient, replace;		clear;/* COMPARISON BPI */;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_behavior ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("BPI")	xtitle("log pce, 2006")    xline (7.613428) xline(9.01545)	legend(off) ;	graph save bpi_gradient, replace;			clear;/* COMPARISON HEIGHT*/;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_height ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("Height")	xtitle("log pce, 2006")    xline (7.613428) xline(9.01545)	legend(off) ;	graph save height_gradient, replace;	clear;		/* COMPARISON WEIGHT*/;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_weight ln_pce06 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("Weight")	xtitle("log pce, 2006")    xline (7.613428) xline(9.01545)	legend(off) ;	graph save weight_gradient, replace;	clear;		***********FAN REGRESSIONS ECD OUTCOMES ON LOG PCE FOR CONTROL - GRADIENTS FIG for 2008 ASSOCIATIVE MEMORY TEST************;***********FAN REGRESSIONS ECD OUTCOMES ON LOG PCE FOR CONTROL - GRADIENTS FIG for 2008 ASSOCIATIVE MEMORY TEST ************;***********FAN REGRESSIONS ECD OUTCOMES ON LOG PCE FOR CONTROL - GRADIENTS FIG for 2008 ASSOCIATIVE MEMORY TEST ************;use fandata, replace;/* 2008*/egen pce_C025=pctile(ln_pce08) if T==0, p(2.5);egen pce_C975=pctile(ln_pce08) if T==0, p(97.5);gen xC=1 if ln_pce06>pce_C025 & ln_pce06<pce_C975;** generate identifiers for 1st and 99th percentile to define grids in fan**;       egen pce_01=pctile(ln_pce08) if T==0, p(1);egen pce_99=pctile(ln_pce08) if T==0, p(99);  egen pce_10=pctile(ln_pce08) if T==0, p(10);egen pce_90=pctile(ln_pce08) if T==0, p(90);   keep   z_martians_08 ln_pce08 unique_05 T xC pce_C025 pce_C975 pce_01 pce_99 pce_10 pce_90;sum pce_01 pce_99 pce_10 pce_90;foreach var of varlist  z_martians_08 {;egen `var'o =  pctile(`var'), p(99.5);egen `var'l = pctile(`var'), p(0.5);replace `var' = . if `var' > `var'o;replace `var' = . if `var' < `var'l;drop `var'o `var'l;};/* Range of dependent variable */;/* cut-of 1% highest and 1% lowest values of lncpe06 for the control for fan of gradients*/;global xmin =   7.964423 ;global xmax =    10.20812 ;/* Number of points at which to calculate, 50 to 100 are typically fine */;global gsize = 100;/* Size of each step */;global st = ($xmax - $xmin)/($gsize-1);/* Bandwidth */;global h = 0.99;drop if ln_pce08<$xmin;drop if ln_pce08>$xmax;save datafan_np, replace;	/* COMPARISON MARTIANS*/;use datafan_np;keep if  T==0;gen xgrid = $xmin + (_n-1)*$st in 1/$gsize;fan_reg z_martians ln_pce08 ESTFCTC ESTDERC $h xgrid;keep if xC==1;keep EST* xgrid pce_C025 pce_C975;sort xgrid;keep in 1/$gsize;sort xgrid;keep if xgrid> pce_C025 & xgrid< pce_C975;twoway	(line ESTFCTC xgrid, sort clpat(solid) lwidth(thick)),	ytitle("Assoc. memory")	xtitle("log pce, 2008")   xline (8.389769) xline(9.624002)	legend(off) ;	graph save martians_gradient, replace;		clear;********** COMBINED GRAPH ******;********** COMBINED GRAPH ******;********** COMBINED GRAPH ******;graph combine tvip_gradient.gph language_gradient.gph memory_gradient.gph martians_gradient.gph personal_gradient.gph bpi_gradient.gph grmotor_gradient.gph  finmotor_gradient.gph legmotor_gradient.gph height_gradient.gph weight_gradient.gph , ycommon;graph save gradients, replace;erase personal_gradient.gph; erase language_gradient.gph; erase finmotor_gradient.gph; erase grmotor_gradient.gph; erase tvip_gradient.gph; erase memory_gradient.gph; erase legmotor_gradient.gph; erase bpi_gradient.gph;erase  height_gradient.gph; erase weight_gradient.gph; erase martians_gradient.gph;erase datafan_np.dta; erase fandata.dta;